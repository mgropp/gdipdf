// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: PythonLexer.flex

/*
 * Modified by Martin Gropp.
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 * $Id$
 */
package de.fau.cs.gdi.gdipdf;

import java.io.Reader;
import java.io.IOException;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class PythonLexer extends Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 128;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_JAVA_DOC_COMMENT = 4;
  public static final int IN_TUTOR_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  1,  1,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\3\u1f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u1f00\1\u4900\1\u1f00\1\u4a00\1\u4b00\2\u1f00\3\u0100\1\u4c00"+
    "\1\u4d00\1\u4e00\12\u1f00\4\u0100\1\u4f00\17\u1f00\2\u0100\1\u5000"+
    "\41\u1f00\2\u0100\1\u5100\1\u5200\3\u1f00\1\u5300\27\u0100\1\u5400"+
    "\2\u0100\1\u5500\45\u1f00\1\u0100\1\u5600\1\u5700\11\u1f00\1\u5800"+
    "\24\u1f00\1\u5900\1\u5a00\1\u1f00\1\u5b00\1\u5c00\1\u5d00\1\u5e00"+
    "\2\u1f00\1\u5f00\5\u1f00\1\u6000\7\u1f00\1\u6100\1\u6200\4\u1f00"+
    "\1\u6300\21\u1f00\246\u0100\1\u6400\20\u0100\1\u6500\1\u6600\25\u0100"+
    "\1\u6700\34\u0100\1\u6800\14\u1f00\2\u0100\1\u6900\u0b05\u1f00\1\u6a00"+
    "\1\u6b00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\16\0\5\1\1\3\1\4"+
    "\1\5\1\6\2\3\1\7\2\10\1\11\1\12\1\10"+
    "\1\12\1\13\1\3\1\14\7\15\2\16\2\10\4\3"+
    "\1\1\3\17\1\20\1\21\1\20\7\22\1\23\1\24"+
    "\4\22\1\25\3\22\1\26\2\22\1\10\1\27\1\10"+
    "\1\3\1\30\1\1\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\6\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\6\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\10\1\3\1\10"+
    "\1\3\41\0\2\1\4\6\4\1\1\6\2\1\1\0"+
    "\7\1\1\6\4\1\1\6\5\1\27\6\1\1\37\6"+
    "\1\1\u01ca\6\4\1\14\6\16\1\5\6\7\1\1\6"+
    "\1\1\1\6\21\1\160\0\5\6\1\1\2\6\2\1"+
    "\4\6\1\1\1\6\6\1\1\6\1\1\3\6\1\1"+
    "\1\6\1\1\24\6\1\1\123\6\1\1\213\6\1\1"+
    "\5\0\2\1\246\6\1\1\46\6\2\1\1\6\7\1"+
    "\47\6\7\1\1\6\1\1\55\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\0\10\1\33\6\5\1"+
    "\3\6\15\1\6\0\5\1\1\6\4\1\13\0\1\1"+
    "\1\0\3\1\53\6\37\0\4\1\2\6\1\0\143\6"+
    "\1\1\1\6\10\0\1\1\6\0\2\6\2\0\1\1"+
    "\4\0\2\6\12\0\3\6\2\1\1\6\17\1\1\0"+
    "\1\6\1\0\36\6\33\0\2\1\131\6\13\0\1\6"+
    "\16\1\12\0\41\6\11\0\2\6\4\1\1\6\5\1"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\5\0"+
    "\22\1\31\6\3\0\4\1\13\6\65\1\25\6\1\1"+
    "\10\6\26\1\60\0\66\6\3\0\1\6\22\0\1\6"+
    "\7\0\12\6\2\0\2\1\12\0\1\1\20\6\3\0"+
    "\1\1\10\6\2\1\2\6\2\1\26\6\1\1\7\6"+
    "\1\1\1\6\3\1\4\6\2\1\1\0\1\6\7\0"+
    "\2\1\2\0\2\1\3\0\1\6\10\1\1\0\4\1"+
    "\2\6\1\1\3\6\2\0\2\1\12\0\4\6\7\1"+
    "\2\6\4\1\3\0\1\1\6\6\4\1\2\6\2\1"+
    "\26\6\1\1\7\6\1\1\2\6\1\1\2\6\1\1"+
    "\2\6\2\1\1\0\1\1\5\0\4\1\2\0\2\1"+
    "\3\0\3\1\1\0\7\1\4\6\1\1\1\6\7\1"+
    "\14\0\3\6\1\0\13\1\3\0\1\1\11\6\1\1"+
    "\3\6\1\1\26\6\1\1\7\6\1\1\2\6\1\1"+
    "\5\6\2\1\1\0\1\6\10\0\1\1\3\0\1\1"+
    "\3\0\2\1\1\6\17\1\2\6\2\0\2\1\12\0"+
    "\1\1\1\6\7\1\1\6\6\0\1\1\3\0\1\1"+
    "\10\6\2\1\2\6\2\1\26\6\1\1\7\6\1\1"+
    "\2\6\1\1\5\6\2\1\1\0\1\6\7\0\2\1"+
    "\2\0\2\1\3\0\10\1\2\0\4\1\2\6\1\1"+
    "\3\6\2\0\2\1\12\0\1\1\1\6\20\1\1\0"+
    "\1\6\1\1\6\6\3\1\3\6\1\1\4\6\3\1"+
    "\2\6\1\1\1\6\1\1\2\6\3\1\2\6\3\1"+
    "\3\6\3\1\14\6\4\1\5\0\3\1\3\0\1\1"+
    "\4\0\2\1\1\6\6\1\1\0\16\1\12\0\11\1"+
    "\1\6\6\1\4\0\1\1\10\6\1\1\3\6\1\1"+
    "\27\6\1\1\20\6\3\1\1\6\7\0\1\1\3\0"+
    "\1\1\4\0\7\1\2\0\1\1\3\6\5\1\2\6"+
    "\2\0\2\1\12\0\20\1\1\6\3\0\1\1\10\6"+
    "\1\1\3\6\1\1\27\6\1\1\12\6\1\1\5\6"+
    "\2\1\1\0\1\6\7\0\1\1\3\0\1\1\4\0"+
    "\7\1\2\0\7\1\1\6\1\1\2\6\2\0\2\1"+
    "\12\0\1\1\2\6\15\1\4\0\1\1\10\6\1\1"+
    "\3\6\1\1\51\6\2\0\1\6\7\0\1\1\3\0"+
    "\1\1\4\0\1\6\5\1\3\6\1\0\7\1\3\6"+
    "\2\0\2\1\12\0\12\1\6\6\2\1\2\0\1\1"+
    "\22\6\3\1\30\6\1\1\11\6\1\1\1\6\2\1"+
    "\7\6\3\1\1\0\4\1\6\0\1\1\1\0\1\1"+
    "\10\0\6\1\12\0\2\1\2\0\15\1\60\6\1\0"+
    "\2\6\7\0\4\1\10\6\10\0\1\1\12\0\47\1"+
    "\2\6\1\1\1\6\2\1\2\6\1\1\1\6\2\1"+
    "\1\6\6\1\4\6\1\1\7\6\1\1\3\6\1\1"+
    "\1\6\1\1\1\6\2\1\2\6\1\1\4\6\1\0"+
    "\2\6\6\0\1\1\2\0\1\6\2\1\5\6\1\1"+
    "\1\6\1\1\6\0\2\1\12\0\2\1\4\6\40\1"+
    "\1\6\27\1\2\0\6\1\12\0\13\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\2\0\10\6\1\1\44\6"+
    "\4\1\24\0\1\1\2\0\5\6\13\0\1\1\44\0"+
    "\11\1\1\0\71\1\53\6\24\0\1\6\12\0\6\1"+
    "\6\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0"+
    "\3\6\4\0\15\6\14\0\1\6\17\0\2\1\46\6"+
    "\1\1\1\6\5\1\1\6\2\1\53\6\1\1\115\6"+
    "\1\1\4\6\2\1\7\6\1\1\1\6\1\1\4\6"+
    "\2\1\51\6\1\1\4\6\2\1\41\6\1\1\4\6"+
    "\2\1\7\6\1\1\1\6\1\1\4\6\2\1\17\6"+
    "\1\1\71\6\1\1\4\6\2\1\103\6\2\1\3\0"+
    "\40\1\20\6\20\1\126\6\2\1\6\6\3\1\u016c\6"+
    "\2\1\21\6\1\1\32\6\5\1\113\6\3\1\13\6"+
    "\7\1\15\6\1\1\4\6\3\0\13\1\22\6\3\0"+
    "\13\1\22\6\2\0\14\1\15\6\1\1\3\6\1\1"+
    "\2\0\14\1\64\6\40\0\3\1\1\6\3\1\2\6"+
    "\1\0\2\1\12\0\41\1\4\0\1\1\12\0\6\1"+
    "\130\6\10\1\5\6\2\0\42\6\1\0\1\6\5\1"+
    "\106\6\12\1\37\6\1\1\14\0\4\1\14\0\12\1"+
    "\12\0\36\6\2\1\5\6\13\1\54\6\4\1\32\6"+
    "\6\1\12\0\46\1\27\6\5\0\4\1\65\6\12\0"+
    "\1\1\35\0\2\1\13\0\6\1\12\0\15\1\1\6"+
    "\10\1\16\0\102\1\5\0\57\6\21\0\7\6\4\1"+
    "\12\0\21\1\11\0\14\1\3\0\36\6\15\0\2\6"+
    "\12\0\54\6\16\0\14\1\44\6\24\0\10\1\12\0"+
    "\3\1\3\6\12\0\44\6\2\1\11\6\107\1\3\0"+
    "\1\1\25\0\4\6\1\0\4\6\3\0\2\6\3\0"+
    "\6\1\300\6\72\0\1\1\5\0\26\6\2\1\6\6"+
    "\2\1\46\6\2\1\6\6\2\1\10\6\1\1\1\6"+
    "\1\1\1\6\1\1\1\6\1\1\37\6\2\1\65\6"+
    "\1\1\7\6\1\1\1\6\3\1\3\6\1\1\7\6"+
    "\3\1\4\6\2\1\6\6\4\1\15\6\5\1\3\6"+
    "\1\1\7\6\16\1\5\0\32\1\5\0\20\1\2\6"+
    "\23\1\1\6\13\1\5\0\1\1\12\0\1\1\1\6"+
    "\15\1\1\6\20\1\15\6\3\1\40\6\20\1\15\0"+
    "\4\1\1\0\3\1\14\0\21\1\1\6\4\1\1\6"+
    "\2\1\12\6\1\1\1\6\3\1\5\6\6\1\1\6"+
    "\1\1\1\6\1\1\1\6\1\1\4\6\1\1\13\6"+
    "\2\1\4\6\5\1\5\6\4\1\1\6\21\1\51\6"+
    "\u0177\1\57\6\1\1\57\6\1\1\205\6\6\1\4\6"+
    "\3\0\2\6\14\1\46\6\1\1\1\6\5\1\1\6"+
    "\2\1\70\6\7\1\1\6\17\1\1\0\27\6\11\1"+
    "\7\6\1\1\7\6\1\1\7\6\1\1\7\6\1\1"+
    "\7\6\1\1\7\6\1\1\7\6\1\1\7\6\1\1"+
    "\40\0\57\1\1\6\325\1\3\6\31\1\11\6\6\0"+
    "\1\1\5\6\2\1\5\6\4\1\126\6\2\1\2\0"+
    "\2\1\3\6\1\1\132\6\1\1\4\6\5\1\52\6"+
    "\2\1\136\6\21\1\33\6\65\1\306\6\112\1\353\6"+
    "\25\1\215\6\103\1\56\6\2\1\15\6\3\1\20\6"+
    "\12\0\2\6\24\1\57\6\1\0\4\1\12\0\1\1"+
    "\37\6\2\0\120\6\2\0\45\1\11\6\2\1\147\6"+
    "\2\1\44\6\1\1\10\6\77\1\13\6\1\0\3\6"+
    "\1\0\4\6\1\0\27\6\5\0\20\1\1\6\7\1"+
    "\64\6\14\1\2\0\62\6\22\0\12\1\12\0\6\1"+
    "\22\0\6\6\3\1\1\6\1\1\1\6\2\1\12\0"+
    "\34\6\10\0\2\1\27\6\15\0\14\1\35\6\3\1"+
    "\4\0\57\6\16\0\16\1\1\6\12\0\6\1\5\6"+
    "\1\0\12\6\12\0\5\6\1\1\51\6\16\0\11\1"+
    "\3\6\1\0\10\6\2\0\2\1\12\0\6\1\27\6"+
    "\3\1\1\6\3\0\62\6\1\0\1\6\3\0\2\6"+
    "\2\0\5\6\2\0\1\6\1\0\1\6\30\1\3\6"+
    "\2\1\13\6\5\0\2\1\3\6\2\0\12\1\6\6"+
    "\2\1\6\6\2\1\6\6\11\1\7\6\1\1\7\6"+
    "\1\1\53\6\1\1\12\6\12\1\163\6\10\0\1\1"+
    "\2\0\2\1\12\0\6\1\244\6\14\1\27\6\4\1"+
    "\61\6\4\1\156\6\2\1\152\6\46\1\7\6\14\1"+
    "\5\6\5\1\1\6\1\0\12\6\1\1\15\6\1\1"+
    "\5\6\1\1\1\6\1\1\2\6\1\1\2\6\1\1"+
    "\154\6\41\1\153\6\22\1\100\6\2\1\66\6\50\1"+
    "\15\6\3\1\20\0\20\1\20\0\3\1\2\6\30\1"+
    "\3\6\31\1\1\6\6\1\5\6\1\1\207\6\2\1"+
    "\1\0\4\1\1\6\13\1\12\0\7\1\32\6\4\1"+
    "\1\6\1\1\32\6\13\1\131\6\3\1\6\6\2\1"+
    "\6\6\2\1\6\6\2\1\3\6\3\1\2\6\3\1"+
    "\2\6\22\1\3\0\4\1\14\6\1\1\32\6\1\1"+
    "\23\6\1\1\2\6\1\1\17\6\2\1\16\6\42\1"+
    "\173\6\105\1\65\6\210\1\1\0\202\1\35\6\3\1"+
    "\61\6\17\1\1\0\37\1\40\6\15\1\36\6\5\1"+
    "\46\6\5\0\5\1\36\6\2\1\44\6\4\1\10\6"+
    "\1\1\5\6\52\1\236\6\2\1\12\0\6\1\44\6"+
    "\4\1\44\6\4\1\50\6\10\1\64\6\234\1\67\6"+
    "\11\1\26\6\12\1\10\6\230\1\6\6\2\1\1\6"+
    "\1\1\54\6\1\1\2\6\3\1\1\6\2\1\27\6"+
    "\12\1\27\6\11\1\37\6\101\1\23\6\1\1\2\6"+
    "\12\1\26\6\12\1\32\6\106\1\70\6\6\1\2\6"+
    "\100\1\1\6\3\0\1\1\2\0\5\1\4\0\4\6"+
    "\1\1\3\6\1\1\33\6\4\1\3\0\4\1\1\0"+
    "\40\1\35\6\3\1\35\6\43\1\10\6\1\1\34\6"+
    "\2\0\31\1\66\6\12\1\26\6\12\1\23\6\15\1"+
    "\22\6\156\1\111\6\67\1\63\6\15\1\63\6\15\1"+
    "\3\0\65\6\17\0\37\1\12\0\17\1\4\0\55\6"+
    "\13\0\2\1\1\0\22\1\31\6\7\1\12\0\6\1"+
    "\3\0\44\6\16\0\1\1\12\0\20\1\43\6\1\0"+
    "\2\1\1\6\11\1\3\0\60\6\16\0\4\6\5\1"+
    "\3\0\3\1\12\0\1\6\1\1\1\6\43\1\22\6"+
    "\1\1\31\6\14\0\6\1\1\0\101\1\7\6\1\1"+
    "\1\6\1\1\4\6\1\1\17\6\1\1\12\6\7\1"+
    "\57\6\14\0\5\1\12\0\6\1\4\0\1\1\10\6"+
    "\2\1\2\6\2\1\26\6\1\1\7\6\1\1\2\6"+
    "\1\1\5\6\2\1\1\0\1\6\7\0\2\1\2\0"+
    "\2\1\3\0\2\1\1\6\6\1\1\0\5\1\5\6"+
    "\2\0\2\1\7\0\3\1\5\0\213\1\65\6\22\0"+
    "\4\6\5\1\12\0\46\1\60\6\24\0\2\6\1\1"+
    "\1\6\10\1\12\0\246\1\57\6\7\0\2\1\11\0"+
    "\27\1\4\6\2\0\42\1\60\6\21\0\3\1\1\6"+
    "\13\1\12\0\46\1\53\6\15\0\10\1\12\0\66\1"+
    "\32\6\3\1\17\0\4\1\12\0\u0166\1\100\6\12\0"+
    "\25\1\2\6\12\0\50\6\7\0\1\6\4\0\10\1"+
    "\1\0\10\1\1\6\13\0\50\6\2\1\4\6\20\0"+
    "\46\1\71\6\7\1\11\6\1\1\45\6\10\0\1\1"+
    "\10\0\1\6\17\1\12\0\30\1\36\6\2\1\26\0"+
    "\1\1\16\0\111\1\7\6\1\1\2\6\1\1\46\6"+
    "\6\0\3\1\1\0\1\1\2\0\1\1\7\0\1\6"+
    "\1\0\10\1\12\0\246\1\232\6\146\1\157\6\21\1"+
    "\304\6\274\1\57\6\321\1\107\6\271\1\71\6\7\1"+
    "\37\6\1\1\12\0\146\1\36\6\2\1\5\0\13\1"+
    "\60\6\7\0\11\1\4\6\14\1\12\0\11\1\25\6"+
    "\5\1\23\6\160\1\105\6\13\1\1\6\56\0\20\1"+
    "\4\0\15\6\100\1\2\6\36\1\355\6\23\1\363\6"+
    "\15\1\37\6\121\1\u018c\6\4\1\153\6\5\1\15\6"+
    "\3\1\11\6\7\1\12\6\3\1\2\0\1\1\4\0"+
    "\301\1\5\0\3\1\26\0\2\1\7\0\36\1\4\0"+
    "\224\1\3\0\273\1\125\6\1\1\107\6\1\1\2\6"+
    "\2\1\1\6\2\1\2\6\2\1\4\6\1\1\14\6"+
    "\1\1\1\6\1\1\7\6\1\1\101\6\1\1\4\6"+
    "\2\1\10\6\1\1\7\6\1\1\34\6\1\1\4\6"+
    "\1\1\5\6\1\1\1\6\3\1\7\6\1\1\u0154\6"+
    "\2\1\31\6\1\1\31\6\1\1\37\6\1\1\31\6"+
    "\1\1\37\6\1\1\31\6\1\1\37\6\1\1\31\6"+
    "\1\1\37\6\1\1\31\6\1\1\10\6\2\1\151\0"+
    "\4\1\62\0\10\1\1\0\16\1\1\0\26\1\5\0"+
    "\1\1\17\0\120\1\7\0\1\1\21\0\2\1\7\0"+
    "\1\1\2\0\1\1\5\0\325\1\305\6\13\1\7\0"+
    "\51\1\104\6\7\0\5\1\12\0\246\1\4\6\1\1"+
    "\33\6\1\1\2\6\1\1\1\6\2\1\1\6\1\1"+
    "\12\6\1\1\4\6\1\1\1\6\1\1\1\6\6\1"+
    "\1\6\4\1\1\6\1\1\1\6\1\1\1\6\1\1"+
    "\3\6\1\1\2\6\1\1\1\6\2\1\1\6\1\1"+
    "\1\6\1\1\1\6\1\1\1\6\1\1\1\6\1\1"+
    "\2\6\1\1\1\6\2\1\4\6\1\1\7\6\1\1"+
    "\4\6\1\1\4\6\1\1\1\6\1\1\12\6\1\1"+
    "\21\6\5\1\3\6\1\1\5\6\1\1\21\6\104\1"+
    "\327\6\51\1\65\6\13\1\336\6\2\1\u0182\6\16\1"+
    "\u0131\6\37\1\36\6\343\1\1\0\36\1\140\0\200\1"+
    "\360\0\20\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\4\1\2\3\2\4\25\1\1\0"+
    "\1\4\5\0\1\4\1\1\1\4\4\1\3\0\3\5"+
    "\1\1\1\6\16\1\1\6\1\1\1\6\16\1\1\7"+
    "\1\10\2\0\6\4\1\5\21\1\1\5\13\1\1\4"+
    "\24\1\1\4\22\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\142\0\223\0\304\0\365\0\u0126"+
    "\0\142\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\223\0\142\0\u05ef\0\u0620\0\u0651\0\u0126\0\u0682"+
    "\0\u06b3\0\u06e4\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\365\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0c40"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\142\0\142"+
    "\0\u0157\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\365\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u086c\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2"+
    "\0\u1913\0\u1944\0\u1975\0\365\0\u19a6\0\u19d7\0\u1a08\0\u1a39"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\3\1\4\1\5\1\6\1\7\1\10\1\11\2\4"+
    "\1\12\1\13\2\14\4\15\1\16\1\15\1\17\1\15"+
    "\1\3\1\7\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\7\1\27\1\7\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\7\1\40\1\7\1\41"+
    "\1\7\61\3\61\0\2\42\1\43\1\42\1\43\22\42"+
    "\1\44\31\42\11\45\1\46\47\45\1\7\5\0\1\7"+
    "\5\0\13\7\1\0\31\7\2\47\1\43\4\47\1\43"+
    "\17\47\1\50\31\47\14\0\3\51\55\0\1\51\3\14"+
    "\1\52\1\53\1\54\2\52\1\55\1\52\1\56\1\0"+
    "\1\57\3\0\1\43\1\60\1\43\7\0\1\61\7\0"+
    "\1\62\15\0\1\51\3\14\1\52\1\53\1\54\5\52"+
    "\1\0\1\57\3\0\1\43\1\60\1\43\22\0\1\63"+
    "\5\0\1\63\5\0\13\15\1\0\1\15\31\63\5\0"+
    "\1\63\5\0\13\15\1\0\1\15\15\63\1\64\13\63"+
    "\5\0\1\63\5\0\13\15\1\0\1\15\17\63\1\65"+
    "\10\63\1\7\5\0\1\7\5\0\13\7\1\0\15\7"+
    "\1\66\3\7\1\67\3\7\1\70\4\7\5\0\1\7"+
    "\5\0\13\7\1\0\16\7\1\71\1\7\1\72\6\7"+
    "\1\73\2\7\5\0\1\7\5\0\13\7\1\0\13\7"+
    "\1\34\2\7\1\74\13\7\5\0\1\7\5\0\13\7"+
    "\1\0\5\7\1\75\3\7\1\76\20\7\5\0\1\7"+
    "\5\0\13\7\1\0\13\7\1\77\12\7\1\100\3\7"+
    "\5\0\1\7\5\0\13\7\1\0\1\7\1\101\7\7"+
    "\1\102\1\7\1\103\2\7\1\33\1\7\1\104\11\7"+
    "\5\0\1\7\5\0\13\7\1\0\13\7\1\105\16\7"+
    "\5\0\1\7\5\0\13\7\1\0\6\7\1\106\5\7"+
    "\1\107\1\110\3\7\1\106\10\7\5\0\1\7\5\0"+
    "\13\7\1\0\1\7\1\111\7\7\1\112\20\7\5\0"+
    "\1\7\5\0\13\7\1\0\5\7\1\113\24\7\5\0"+
    "\1\7\5\0\13\7\1\0\16\7\1\114\13\7\5\0"+
    "\1\7\5\0\13\7\1\0\20\7\1\106\11\7\5\0"+
    "\1\7\5\0\13\7\1\0\1\7\1\115\30\7\5\0"+
    "\1\7\5\0\13\7\1\0\1\7\1\116\3\7\1\117"+
    "\24\7\5\0\1\7\5\0\13\7\1\0\5\7\1\120"+
    "\14\7\1\121\7\7\5\0\1\7\5\0\13\7\1\0"+
    "\20\7\1\122\2\7\1\123\6\7\5\0\1\7\5\0"+
    "\13\7\1\0\10\7\1\124\1\125\20\7\5\0\1\7"+
    "\5\0\13\7\1\0\11\7\1\126\17\7\2\42\1\43"+
    "\56\42\2\45\1\127\56\45\2\46\1\130\56\46\2\47"+
    "\1\43\56\47\14\0\3\51\1\0\1\43\1\60\6\0"+
    "\1\131\3\0\1\43\1\60\1\43\36\0\13\52\1\0"+
    "\1\52\42\0\1\132\1\0\3\133\10\52\1\0\1\133"+
    "\44\0\2\134\11\52\1\0\1\52\44\0\6\135\5\52"+
    "\1\0\1\52\6\136\36\0\3\14\10\52\1\0\1\52"+
    "\42\0\1\132\1\0\3\137\11\0\1\137\44\0\2\140"+
    "\57\0\6\136\7\0\6\136\22\0\1\63\5\0\1\63"+
    "\5\0\13\63\1\0\32\63\5\0\1\63\5\0\13\63"+
    "\1\0\15\63\1\141\14\63\5\0\1\63\5\0\13\63"+
    "\1\0\23\63\1\141\5\63\1\7\5\0\1\7\5\0"+
    "\13\7\1\0\4\7\1\106\25\7\5\0\1\7\5\0"+
    "\13\7\1\0\21\7\1\142\5\7\1\143\2\7\5\0"+
    "\1\7\5\0\13\7\1\0\1\7\1\144\30\7\5\0"+
    "\1\7\5\0\13\7\1\0\16\7\1\145\13\7\5\0"+
    "\1\7\5\0\13\7\1\0\5\7\1\146\24\7\5\0"+
    "\1\7\5\0\13\7\1\0\22\7\1\147\7\7\5\0"+
    "\1\7\5\0\13\7\1\0\14\7\1\150\1\151\14\7"+
    "\5\0\1\7\5\0\13\7\1\0\6\7\1\106\4\7"+
    "\1\106\16\7\5\0\1\7\5\0\13\7\1\0\3\7"+
    "\1\120\26\7\5\0\1\7\5\0\13\7\1\0\11\7"+
    "\1\152\7\7\1\153\10\7\5\0\1\7\5\0\13\7"+
    "\1\0\3\7\1\154\26\7\5\0\1\7\5\0\13\7"+
    "\1\0\13\7\1\155\16\7\5\0\1\7\5\0\13\7"+
    "\1\0\15\7\1\156\14\7\5\0\1\7\5\0\13\7"+
    "\1\0\16\7\1\157\13\7\5\0\1\7\5\0\13\7"+
    "\1\0\16\7\1\160\13\7\5\0\1\7\5\0\13\7"+
    "\1\0\16\7\1\161\13\7\5\0\1\7\5\0\13\7"+
    "\1\0\17\7\1\162\12\7\5\0\1\7\5\0\13\7"+
    "\1\0\22\7\1\163\7\7\5\0\1\7\5\0\13\7"+
    "\1\0\14\7\1\164\15\7\5\0\1\7\5\0\13\7"+
    "\1\0\21\7\1\120\10\7\5\0\1\7\5\0\13\7"+
    "\1\0\14\7\1\165\15\7\5\0\1\7\5\0\13\7"+
    "\1\0\15\7\1\166\4\7\1\106\7\7\5\0\1\7"+
    "\5\0\13\7\1\0\21\7\1\167\10\7\5\0\1\7"+
    "\5\0\13\7\1\0\11\7\1\170\3\7\1\171\14\7"+
    "\5\0\1\7\5\0\13\7\1\0\22\7\1\172\7\7"+
    "\5\0\1\7\5\0\13\7\1\0\20\7\1\163\11\7"+
    "\5\0\1\7\5\0\13\7\1\0\27\7\1\106\2\7"+
    "\5\0\1\7\5\0\13\7\1\0\17\7\1\173\12\7"+
    "\5\0\1\7\5\0\13\7\1\0\11\7\1\174\20\7"+
    "\5\0\1\7\5\0\13\7\1\0\22\7\1\175\7\7"+
    "\5\0\1\7\5\0\13\7\1\0\5\7\1\176\23\7"+
    "\14\0\3\137\11\0\1\137\44\0\3\133\1\52\1\53"+
    "\6\52\1\0\1\133\3\0\1\43\1\0\1\43\36\0"+
    "\2\134\11\52\1\0\1\55\44\0\6\135\5\52\1\0"+
    "\1\56\6\136\36\0\6\136\6\0\1\62\6\136\36\0"+
    "\3\137\1\0\1\43\7\0\1\137\3\0\1\43\1\0"+
    "\1\43\36\0\2\140\12\0\1\61\30\0\1\63\5\0"+
    "\1\63\5\0\13\63\1\0\5\63\1\177\23\63\1\7"+
    "\5\0\1\7\5\0\13\7\1\0\5\7\1\200\24\7"+
    "\5\0\1\7\5\0\13\7\1\0\15\7\1\201\14\7"+
    "\5\0\1\7\5\0\13\7\1\0\11\7\1\202\20\7"+
    "\5\0\1\7\5\0\13\7\1\0\13\7\1\163\16\7"+
    "\5\0\1\7\5\0\13\7\1\0\1\7\1\203\30\7"+
    "\5\0\1\7\5\0\13\7\1\0\5\7\1\204\24\7"+
    "\5\0\1\7\5\0\13\7\1\0\17\7\1\205\12\7"+
    "\5\0\1\7\5\0\13\7\1\0\22\7\1\206\7\7"+
    "\5\0\1\7\5\0\13\7\1\0\6\7\1\106\23\7"+
    "\5\0\1\7\5\0\13\7\1\0\5\7\1\106\24\7"+
    "\5\0\1\7\5\0\13\7\1\0\5\7\1\207\24\7"+
    "\5\0\1\7\5\0\13\7\1\0\21\7\1\210\10\7"+
    "\5\0\1\7\5\0\13\7\1\0\1\7\1\211\30\7"+
    "\5\0\1\7\5\0\13\7\1\0\1\7\1\120\30\7"+
    "\5\0\1\7\5\0\13\7\1\0\14\7\1\106\13\7"+
    "\1\212\1\7\5\0\1\7\5\0\13\7\1\0\2\7"+
    "\1\213\27\7\5\0\1\7\5\0\13\7\1\0\16\7"+
    "\1\200\13\7\5\0\1\7\5\0\13\7\1\0\2\7"+
    "\1\214\27\7\5\0\1\7\5\0\13\7\1\0\16\7"+
    "\1\215\13\7\5\0\1\7\5\0\13\7\1\0\13\7"+
    "\1\216\16\7\5\0\1\7\5\0\13\7\1\0\21\7"+
    "\1\106\10\7\5\0\1\7\5\0\13\7\1\0\21\7"+
    "\1\153\10\7\5\0\1\7\5\0\13\7\1\0\7\7"+
    "\1\217\22\7\5\0\1\7\5\0\13\7\1\0\23\7"+
    "\1\220\6\7\5\0\1\7\5\0\13\7\1\0\13\7"+
    "\1\217\16\7\5\0\1\7\5\0\13\7\1\0\13\7"+
    "\1\153\16\7\5\0\1\7\5\0\13\7\1\0\10\7"+
    "\1\106\21\7\5\0\1\7\5\0\13\7\1\0\13\7"+
    "\1\66\16\7\5\0\1\7\5\0\13\7\1\0\20\7"+
    "\1\202\11\7\5\0\1\7\5\0\13\7\1\0\3\7"+
    "\1\106\26\7\5\0\1\7\5\0\13\7\1\0\22\7"+
    "\1\106\7\7\5\0\1\7\5\0\13\7\1\0\12\7"+
    "\1\106\17\7\5\0\1\7\5\0\13\7\1\0\1\7"+
    "\1\221\17\7\1\163\10\7\5\0\1\7\5\0\13\7"+
    "\1\0\13\7\1\222\16\7\5\0\1\7\5\0\13\7"+
    "\1\0\11\7\1\223\20\7\5\0\1\7\5\0\13\7"+
    "\1\0\17\7\1\202\12\7\5\0\1\7\5\0\13\7"+
    "\1\0\5\7\1\224\24\7\5\0\1\7\5\0\13\7"+
    "\1\0\13\7\1\225\16\7\5\0\1\7\5\0\13\7"+
    "\1\0\5\7\1\226\24\7\5\0\1\7\5\0\13\7"+
    "\1\0\1\7\1\227\30\7\5\0\1\7\5\0\13\7"+
    "\1\0\4\7\1\230\25\7\5\0\1\7\5\0\13\7"+
    "\1\0\20\7\1\231\11\7\5\0\1\7\5\0\13\7"+
    "\1\0\16\7\1\232\13\7\5\0\1\7\5\0\13\7"+
    "\1\0\5\7\1\163\24\7\5\0\1\7\5\0\13\7"+
    "\1\0\20\7\1\233\11\7\5\0\1\7\5\0\13\7"+
    "\1\0\20\7\1\234\11\7\5\0\1\7\5\0\13\7"+
    "\1\0\5\7\1\235\24\7\5\0\1\7\5\0\13\7"+
    "\1\0\15\7\1\236\14\7\5\0\1\7\5\0\13\7"+
    "\1\0\13\7\1\122\16\7\5\0\1\7\5\0\13\7"+
    "\1\0\15\7\1\237\14\7\5\0\1\7\5\0\13\7"+
    "\1\0\13\7\1\106\16\7\5\0\1\7\5\0\13\7"+
    "\1\0\1\7\1\106\30\7\5\0\1\7\5\0\13\7"+
    "\1\0\27\7\1\240\2\7\5\0\1\7\5\0\13\7"+
    "\1\0\3\7\1\213\26\7\5\0\1\7\5\0\13\7"+
    "\1\0\15\7\1\106\14\7\5\0\1\7\5\0\13\7"+
    "\1\0\20\7\1\241\11\7\5\0\1\7\5\0\13\7"+
    "\1\0\26\7\1\163\3\7\5\0\1\7\5\0\13\7"+
    "\1\0\23\7\1\153\6\7\5\0\1\7\5\0\13\7"+
    "\1\0\21\7\1\242\10\7\5\0\1\7\5\0\13\7"+
    "\1\0\24\7\1\243\5\7\5\0\1\7\5\0\13\7"+
    "\1\0\1\7\1\244\30\7\5\0\1\7\5\0\13\7"+
    "\1\0\5\7\1\120\24\7\5\0\1\7\5\0\13\7"+
    "\1\0\11\7\1\245\20\7\5\0\1\7\5\0\13\7"+
    "\1\0\27\7\1\163\2\7\5\0\1\7\5\0\13\7"+
    "\1\0\5\7\1\246\24\7\5\0\1\7\5\0\13\7"+
    "\1\0\25\7\1\163\3\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\1\11\30\1\1\0\1\11\5\0"+
    "\7\1\3\0\44\1\2\11\2\0\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	public static boolean ASSERT_IS_KEYWORD = true;

	public byte getStartState() {
		return YYINITIAL+1;
	}

	public byte getCurrentState() {
		return (byte) (yystate()+1);
	}

	public void setState(byte newState) {
		yybegin(newState-1);
	}

	public byte getNextToken() throws IOException {
		return (byte) yylex();
	}

	public int getTokenLength() {
		return yylength();
	}

	public void setReader(Reader r) {
		this.zzReader = r;
		this.yyreset(r);
	}

	public PythonLexer() {
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN_STYLE;
            }
            // fall through
          case 9: break;
          case 2:
            { return OPERATOR_STYLE;
            }
            // fall through
          case 10: break;
          case 3:
            { return SEPARATOR_STYLE;
            }
            // fall through
          case 11: break;
          case 4:
            { return LITERAL_STYLE;
            }
            // fall through
          case 12: break;
          case 5:
            { return TYPE_STYLE;
            }
            // fall through
          case 13: break;
          case 6:
            { return KEYWORD_STYLE;
            }
            // fall through
          case 14: break;
          case 7:
            { return COMMENT_STYLE;
            }
            // fall through
          case 15: break;
          case 8:
            { return TUTOR_COMMENT_STYLE;
            }
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
